// Generated by CoffeeScript 1.3.3
/*
*********************************************************************************************
// jValidationによるフォーム入力検証用の標準検証メソッド群。
// 検証メソッドの定義、Validatorの登録を行う。
//
// 独自の検証メソッドを定義する場合はこのスクリプトを参考に作成するとよい。
//
// @author Sonoda Ryohei 2012/06/07 MIT Licence.
*********************************************************************************************
*/

var CompareType, ValidatorUtil;

ValidatorUtil = (function() {

  function ValidatorUtil() {}

  ValidatorUtil.isHalfInt = function(value, sign) {
    var pattern;
    pattern = sign ? /^[-\+]?[0-9]+$/ : /^[0-9]+$/;
    return pattern.test(value.toString());
  };

  ValidatorUtil.isHalfAlph = function(value) {
    return !/[^a-zA-Z]/.test(value.toString());
  };

  ValidatorUtil.isHalfAlphInt = function(value) {
    return !/[^a-zA-Z0-9]/.test(value.toString());
  };

  ValidatorUtil.isHalfNum = function(value, sign) {
    var pattern;
    if (sign) {
      pattern = /^[-\+]?[0-9]+([\.,][0-9]*)?$|^[\.,][0-9]+$/;
    } else {
      pattern = /^[0-9]+([\.,][0-9]*)?$|^[\.,][0-9]+$/;
    }
    return pattern.test(value.toString());
  };

  ValidatorUtil.isRange = function(value, min, max) {
    _min;

    _max;

    _val;

    var _max, _min, _val;
    if (typeof value === "string") {
      _min = min.toString();
      _max = max.toString();
      _val = value.toString();
    } else if (!isNaN(value)) {
      _min = new Number(min);
      _max = new Number(max);
      _val = new Number(value);
    } else {
      return (min <= value && value <= max);
    }
    if (_min > _max) {
      throw new "ValidatorUtil#isRange min<=maxとなるように引数を指定してください";
    }
    return (_min <= _val && _val <= _max);
  };

  ValidatorUtil.isEmail = function(value, strict) {
    var pattern;
    pattern = strict ? /(?:(?:[A-Za-z0-9!#$%&'*+\-\/=?^_`{|}~]+(?:\.[A-Za-z0-9!#$%&'*+\-\/=?^_`{|}~]+)*)|(?:"(?:[\x21\x23-\x5B\x5D-\x7E]|(?:\\(?:[\x21-\x7E]|[\x20\x09])))*")|(?:(?:(?:[A-Za-z0-9!#$%&'*+\-\/=?^_`{|}~]+)|(?:"(?:[\x21\x23-\x5B\x5D-\x7E]|(?:\\(?:[\x21-\x7E]|[\x20\x09])))*"))(?:\.(?:(?:[A-Za-z0-9!#$%&'*+\-\/=?^_`{|}~]+)|(?:"(?:[\x21\x23-\x5B\x5D-\x7E]|(?:\\(?:[\x21-\x7E]|[\x20\x09])))*")))*))@(?:(?:[A-Za-z0-9!#$%&'*+\-\/=?^_`{|}~]+(?:\.[A-Za-z0-9!#$%&'*+\-\/=?^_`{|}~]+)*)|(?:(?:[A-Za-z0-9!#$%&'*+\-\/=?^_`{|}~]+)(?:\.(?:[A-Za-z0-9!#$%&'*+\-\/=?^_`{|}~]+))*))/i : /^[0-9a-z\-_.!#$\%\&'*+\/=?^`\{\}\|~]+@[a-z\-]+(?:\.[a-z\-]+)\.[a-z\-]+$/i;
    return pattern.test(value.toString());
  };

  ValidatorUtil.isDate = function(value) {
    var d, dateParts, dateStr, dd, mm, yyyy;
    dateStr = value.toString().replace(/^\s+|\s+$/g, '');
    if (!/^(?:([0-9]{0,2}[0-9]{2})[\/](0[1-9]|1[0-2]|[1-9])[\/](0[1-9]|1[0-9]|2[0-9]|3[0-1]|[1-9]))|(?:([0-9]{0,2}[0-9]{2})-(0[1-9]|1[0-2]|[1-9])-(0[1-9]|1[0-9]|2[0-9]|3[0-1]|[1-9]))|(?:([0-9]{0,2}[0-9]{2})年(0[1-9]|1[0-2]|[1-9])月(0[1-9]|1[0-9]|2[0-9]|3[0-1]|[1-9])日)$/.test(dateStr)) {
      return false;
    }
    dateParts = dateStr.replace(/[\-年月]/g, '/').replace(/日/, '').split('/');
    if (dateParts.length !== 3) {
      return false;
    }
    yyyy = dateParts[0] - 0;
    mm = dateParts[1] - 0;
    dd = dateParts[2] - 0;
    if (dateParts[0].length === 2) {
      yyyy = yyyy < 50 ? '20' + yyyy - 0 : '19' + yyyy - 0;
    }
    d = new Date(yyyy, mm - 1, dd);
    return d.getFullYear() === yyyy && d.getMonth() + 1 === mm && d.getDate() === dd;
  };

  return ValidatorUtil;

})();

/*
検証メソッドを定義してValidateManagerに登録する。
*/


ValidateManager.registerValidation('Required', function(field, msg) {
  if (this.isEmtpyField(field)) {
    return msg;
  }
});

ValidateManager.registerValidation('HalfInt', function(field, msg, sign) {
  if (this.isEmtpyField(field)) {
    return '';
  }
  if (!ValidatorUtil.isHalfInt($(this.form.elements[field]).val(), sign)) {
    return msg;
  }
});

ValidateManager.registerValidation('HalfAlph', function(field, msg) {
  if (this.isEmtpyField(field)) {
    return '';
  }
  if (!ValidatorUtil.isHalfAlph($(this.form.elements[field]).val())) {
    return msg;
  }
});

ValidateManager.registerValidation('HalfAlphInt', function(field, msg) {
  if (this.isEmtpyField(field)) {
    return '';
  }
  if (!ValidatorUtil.isHalfAlphInt($(this.form.elements[field]).val())) {
    return msg;
  }
});

ValidateManager.registerValidation('HalfNum', function(field, msg, sign) {
  if (this.isEmtpyField(field)) {
    return '';
  }
  if (!ValidatorUtil.isHalfNum($(this.form.elements[field]).val(), sign)) {
    return msg;
  }
});

ValidateManager.registerValidation('Range', function(field, msg, params) {
  var max, min, value;
  min = params.min;
  max = params.max;
  if (!(max != null) || isNaN(max || !(min != null) || isNaN(min))) {
    throw "ValidateManager#Range: min, maxには数値を指定してください。 {min=" + min + ", max=" + max + "}";
  }
  if (this.isEmtpyField(field)) {
    return '';
  }
  value = $(this.form.elements[field]).val();
  if (isNaN(value)) {
    return '';
  }
  if (!ValidatorUtil.isRange(value, min, max)) {
    return msg;
  }
});

ValidateManager.registerValidation('Max', function(field, msg, max) {
  var value;
  if (!(max != null)) {
    throw 'ValidateManager#Max: maxを指定してください。';
  }
  if (isNaN(max)) {
    throw "ValidateManager#Max: maxには数値を指定してください。 max=" + max;
  }
  if (this.isEmtpyField(field)) {
    return '';
  }
  value = $(this.form.elements[field]).val();
  if (!isNaN(value && new Number(value > max))) {
    return msg;
  }
});

ValidateManager.registerValidation('Min', function(field, msg, min) {
  var value;
  if (!(min != null)) {
    throw 'ValidateManager#Min: minを指定してください。';
  }
  if (isNaN(min)) {
    throw "ValidateManager#Min: minには数値を指定してください。 min=" + min;
  }
  if (this.isEmtpyField(field)) {
    return '';
  }
  value = $(this.form.elements[field]).val();
  if (!isNaN(value && new Number(value < min))) {
    return msg;
  }
});

ValidateManager.registerValidation('Length', function(field, msg, params) {
  var max, min, strLength, _ref;
  min = params.min;
  max = params.max;
  if (!(max != null) || max <= 0 || isNaN(max || !(min != null) || min <= 0 || isNaN(min))) {
    throw "ValidateManager#Length: min, maxには1以上の整数を指定してください。 {min=" + min + ", max=" + max + "}";
  }
  if (this.isEmtpyField(field)) {
    return '';
  }
  strLength = (_ref = $(this.form.elements[field]).val()) != null ? _ref.length : void 0;
  if (!ValidatorUtil.isRange(strLength, min, max)) {
    return msg;
  }
});

ValidateManager.registerValidation('MaxLength', function(field, msg, max) {
  var _ref;
  if (!(max != null) || max <= 0 || isNaN(max)) {
    throw "ValidateManager#MaxLength: maxには1以上の整数を指定してください。 max=" + max;
  }
  if (this.isEmtpyField(field)) {
    return '';
  }
  if (((_ref = $(this.form.elements[field]).val()) != null ? _ref.length : void 0) > max) {
    return msg;
  }
});

ValidateManager.registerValidation('MinLength', function(field, msg, min) {
  var _ref;
  if (!(min != null) || min <= 0 || isNaN(min)) {
    throw "ValidateManager#MinLength: minには1以上の整数を指定してください。 min=" + min;
  }
  if (this.isEmtpyField(field)) {
    return '';
  }
  if (((_ref = $(this.form.elements[field]).val()) != null ? _ref.length : void 0) < min) {
    return msg;
  }
});

ValidateManager.registerValidation('Date', function(field, msg) {
  if (this.isEmtpyField(field)) {
    return '';
  }
  if (!ValidatorUtil.isDate($(this.form.elements[field]).val())) {
    return msg;
  }
});

ValidateManager.registerValidation('DatePart', function(year, msg, params) {
  var dateValue, day, month;
  month = params.month;
  day = params.day;
  if (!month || !day) {
    throw 'ValidateManager#DatePart: 月、日のフィールド名を指定してください。';
  }
  if (this.isEmtpyField(year || this.isEmtpyField(month || this.isEmtpyField(day)))) {
    return '';
  }
  dateValue = $(this.form.elements[year]).val();
  dateValue += '/' + $(this.form.elements[month]).val();
  dateValue += '/' + $(this.form.elements[day]).val();
  if (!ValidatorUtil.isDate(dateValue)) {
    return msg;
  }
});

ValidateManager.registerValidation('Mask', function(field, msg, pattern) {
  if (!pattern) {
    throw 'ValidateManager#Mask: patternを指定してください。';
  }
  if (this.isEmtpyField(field)) {
    return '';
  }
  if (!$(this.form.elements[field]).val().test(pattern)) {
    return msg;
  }
});

ValidateManager.registerValidation('Email', function(field, msg, strict) {
  if (strict == null) {
    strict = false;
  }
  if (this.isEmtpyField(field)) {
    return '';
  }
  if (!ValidatorUtil.isEmail($(this.form.elements[field]).val(), strict)) {
    return msg;
  }
});

ValidateManager.registerValidation('Equals', function(field, msg, target) {
  if (this.isEmtpyField(field)) {
    return '';
  }
  if (!target) {
    throw "ValidateManager#Equals: " + field + "と等価チェックを行うフィールド名を指定してください。";
  }
  if ($(this.form.elements[field]).val() !== $(this.form.elements[target]).val()) {
    return msg;
  }
});

ValidateManager.registerValidation('RequiredRefs', function(field, msg, params) {
  var checkExists, elm, elmName, nonPrerequisite, prerequisite, _i, _j, _len, _len1, _ref;
  prerequisite = params.prerequisite;
  nonPrerequisite = params.nonPrerequisite;
  if (!(prerequisite != null) && !(nonPrerequisite != null)) {
    throw 'ValidateManager#RequiredRefs: prerequisite, nonPrerequisiteのいずれかを指定してください。';
  }
  checkExists = (_ref = params.checkExists) != null ? _ref : true;
  if (prerequisite != null) {
    for (_i = 0, _len = prerequisite.length; _i < _len; _i++) {
      elmName = prerequisite[_i];
      elm = this.form.elements[elmName];
      if (!(elm != null)) {
        if (checkExists) {
          throw "ValidateManager#RequiredRefs: " + elmName + "フィールドが見つかりません。";
        } else {
          continue;
        }
      }
      if (!$(elm).val()) {
        return '';
      }
    }
  }
  if (nonPrerequisite != null) {
    for (_j = 0, _len1 = nonPrerequisite.length; _j < _len1; _j++) {
      elmName = nonPrerequisite[_j];
      elm = this.form.elements[elmName];
      if (!(elm != null)) {
        if (checkExists) {
          throw "ValidateManager#RequiredRefs: " + elmName + "フィールドが見つかりません。";
        } else {
          continue;
        }
      }
      if ($(elm).val()) {
        return '';
      }
    }
  }
  if (this.isEmtpyField(field)) {
    return msg;
  }
});

CompareType = (function() {

  function CompareType(value) {
    this.value = value;
  }

  CompareType.EQUAL = new CompareType('EQUAL');

  CompareType.GREATER = new CompareType('GREATER');

  CompareType.LESS = new CompareType('LESS');

  CompareType.GREATER_EQUAL = new CompareType('GREATER_EQUAL');

  CompareType.LESS_EQUAL = new CompareType('LESS_EQUAL');

  return CompareType;

})();

ValidateManager.registerValidation('CompareNumber', function(field, msg, params) {
  var compareType, targetName, targetValue, value;
  targetName = params.targetName;
  compareType = params.compareType;
  if (!(this.form.elements[targetName] != null)) {
    throw "ValidateManager#CompareNumber: " + this.form.name + "フォームに" + targetName + "フィールドが見つかりません。";
  }
  if (this.isEmtpyField(field || this.isEmtpyField(targetName))) {
    return '';
  }
  value = $(this.form.elements[field]).val();
  targetValue = $(this.form.elements[targetName]).val();
  if (isNaN(value || isNaN(targetValue))) {
    return '';
  }
  value = new Number(value);
  targetValue = new Number(targetValue);
  switch (compareType) {
    case CompareType.EQUAL:
      if (value !== targetValue) {
        return msg;
      }
      break;
    case CompareType.GREATER:
      if (value <= targetValue) {
        return msg;
      }
      break;
    case CompareType.LESS:
      if (value >= targetValue) {
        return msg;
      }
      break;
    case CompareType.GREATER_EQUAL:
      if (value < targetValue) {
        return msg;
      }
      break;
    case CompareType.LESS_EQUAL:
      if (value > targetValue) {
        return msg;
      }
  }
});

/*
登録した検証メソッドをフィールドに設定するためのショートカットメソッド
*/


ValidateManager.prototype.addRequired = function(fieldName, msg) {
  return this.add(fieldName, msg, 'Required');
};

ValidateManager.prototype.addHalfInt = function(fieldName, msg, sign) {
  if (sign == null) {
    sign = false;
  }
  return this.add(fieldName, msg, 'HalfInt', sign);
};

ValidateManager.prototype.addHalfAlph = function(fieldName, msg) {
  return this.add(fieldName, msg, 'HalfAlph');
};

ValidateManager.prototype.addHalfAlphInt = function(fieldName, msg) {
  return this.add(fieldName, msg, 'HalfAlphInt');
};

ValidateManager.prototype.addHalfNum = function(fieldName, msg, sign) {
  if (sign == null) {
    sign = false;
  }
  return this.add(fieldName, msg, 'HalfNum', sign);
};

ValidateManager.prototype.addRange = function(fieldName, msg, min, max) {
  return this.add(fieldName, msg, 'Range', {
    min: new Number(min),
    max: new Number(max)
  });
};

ValidateManager.prototype.addMax = function(fieldName, msg, max) {
  return this.add(fieldName, msg, 'Max', new Number(max));
};

ValidateManager.prototype.addMin = function(fieldName, msg, min) {
  return this.add(fieldName, msg, 'Min', new Number(mi));
};

ValidateManager.prototype.addLength = function(fieldName, msg, min, max) {
  return this.add(fieldName, msg, 'Length', {
    min: new Number(min),
    max: new Number(max)
  });
};

ValidateManager.prototype.addMaxLength = function(fieldName, msg, max) {
  return this.add(fieldName, msg, 'MaxLength', new Number(max));
};

ValidateManager.prototype.addMinLength = function(fieldName, msg, min) {
  return this.add(fieldName, msg, 'MinLength', new Number(min));
};

ValidateManager.prototype.addDate = function(fieldName, msg) {
  return this.add(fieldName, msg, 'Date');
};

ValidateManager.prototype.addDatePart = function(msg, year, month, day) {
  return this.add(year, msg, 'DatePart', {
    month: month,
    day: day
  });
};

ValidateManager.prototype.addMask = function(fieldName, msg, pattern) {
  return this.add(fieldName, msg, 'Mask', pattern);
};

ValidateManager.prototype.addEmail = function(fieldName, msg) {
  return this.add(fieldName, msg, 'Email');
};

ValidateManager.prototype.addEquals = function(fieldName, msg, targetName) {
  return this.add(fieldName, msg, 'Equals', targetName);
};

ValidateManager.prototype.addRequiredRefs = function(fieldName, msg, prerequisite, nonPrerequisite, checkExists) {
  if (checkExists == null) {
    checkExists = true;
  }
  return this.add(fieldName, msg, 'RequiredRefs', {
    prerequisite: prerequisite,
    nonPrerequisite: nonPrerequisite,
    checkExists: checkExists
  });
};

ValidateManager.prototype.addCompareNumber = function(fieldName, msg, targetName, compareType) {
  return this.add(fieldName, msg, 'CompareNumber', {
    targetName: targetName,
    compareType: compareType
  });
};
